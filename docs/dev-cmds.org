* 用PlayerRequestPrinter辅助开发
iex -S mix

TableSupervisor.start_table(%{dev_table_config | id: 9004})
HeadsupTableServer.join_table(9004, "anna")
HeadsupTableServer.join_table(9004, "bob")
HeadsupTableServer.debug_state(9004)

HeadsupTableServer.start_game(9004, "anna")
HeadsupTableServer.start_game(9004, "bob")
HeadsupTableServer.debug_state(9004)

HeadsupTableServer.player_action_done(9004, "anna", :call)
HeadsupTableServer.player_action_done(9004, "bob", :check)

* LiveView客户端自顶向下开发
# LV玩家加入
http://localhost:4000/table

# 命令行玩家加入
Player.start_player("anna")
Player.join_table("anna", 1001, 500)
Player.start_game("anna")
HeadsupTableServer.debug_state(1001)

PlayerServer.player_action("anna", :check)
PlayerServer.player_action("anna", {:raise, 15})
PlayerServer.player_action("anna", {:raise, 20})
PlayerServer.player_action("anna", {:raise, 30})


* TODO
- HeadsupTableServerTest当中，不应该用PlayerRequestNull，而是应该mox从而可以确保调用的正确
- 测试的方面，对于OTP进程的复杂一点的测试
- LiveView客户端的实现，显示具体扑克牌，更多操作，更合理的页面规划，等等，完成一个基本可用的简单客户端
- LiveView方面，测试LiveView
- 后续跟随pragmaticstudio课程融入更多LiveView内容到客户端

* TODO
- 参考12.Sorting给lobby加入排序
- 参考13.Pagination给lobby加入分页
- 参考5.Dynamic Form给raise设置range

* TODO
- 修改测试，确保HeadsupTableServer正确调用Player带上正确参数
- 重构整理HeadsupTableServer，内部梳理，清晰简洁代码
